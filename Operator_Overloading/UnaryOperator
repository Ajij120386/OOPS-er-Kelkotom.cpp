/*
The mechanism of giving special meaning to an operator is known as
 operator overloading.
No, it is not necessary to overload an operator.
We can almost create a new language of our own by the creative use\
 of the function and
operator overloading techniques.
 However, we do it to make our task easier.
The main motivation of Object Oriented Programming is to improve code
reuse and functionality.
This makes readability and reuse quite easier.
In C++ we can overload some operators like +, -, [], -> etc.

Rules for Operator Overloading:
Here are rules for Operator Overloading:

For it to work, at least one operand must be a user-defined class object.
You can only overload existing operators. You can’t overload new operators.
Some operators cannot be overloaded using a friend function. However,
such operators can be overloaded using member function.

 But we cannot overload any operators in it. Some of the operators
 cannot be overloaded.
 These operators are like below

“.” Member access or dot operator
“? : ” Ternary or conditional operator
 “::” Scope resolution operator
  “.*” Pointer to member operator
“sizeof” The object size operator

These operators cannot be overloaded because if we overload them it will make serious programming issues.

For an example the sizeof operator returns the size of the object or datatype as an operand.
This is evaluated by the compiler. It cannot be evaluated during runtime.
 So we cannot overload it.
 Unary operators operate on only one operand. The increment operator ++ and
  decrement operator -- are examples of unary operators.
*/
// Overload ++ when used as prefix and postfix

// Overload ++ when used as prefix and postfix

#include <iostream>
using namespace std;

class Count {
   private:
    int value;

   public:

    // Constructor to initialize count to 5
    Count() : value(5) {}


    // Overload ++ when used as prefix
    void operator ++ () {
        ++value;
    }


    // Overload ++ when used as postfix
    void operator ++ (int) {
        value++;
    }

    void display() {
        cout << "Count: " << value << endl;
    }
};

int main() {
    Count count1;

    // Call the "void operator ++ (int)" function
    count1++;
    count1.display();

    // Call the "void operator ++ ()" function
    ++count1;

    count1.display();
    return 0;
}
