#include <iostream>
using namespace std;
//When one class is made virtual then only one copy of its data member and member function
//is passed to the classes inheriting it. So in our example when we will make class “A” a
// virtual class then only one copy of the data member and member function will be passed
// to the classes “B” and “C” which will be shared between all classes.
//This will help to solve the ambiguity.
//:To avoid the duplication of inherited members due to multiple paths between base and
// derived classes we make base class virtual.
/*
Virtual base classes offer a way to save space and avoid ambiguities in class hierarchies that use multiple inheritances.
When a base class is specified as a virtual base, it can act as an indirect base more than once
 without duplication of its data members. A single copy of its data members is shared by all the bas
e classes that use virtual base.
To resolve this ambiguity when class A is inherited in both class B and class C,
 it is declared as virtual base class by placing a keyword virtual as

Consider the situation where we have one class A .This class is
 A is inherited by two other classes B and C. Both these class are
 inherited into another in a new class D as shown in figure below.
 As we can see from the figure that data members/function of class A are inherited
  twice to class D. One through class B and second through class C. When any data /
  function member of class A is accessed by an object of class D, ambiguity arises as to which data/fun
 ction member would be called? One inherited through B or the other inherited through C.
 This confuses compiler and it displays error.
*/
class A {
  public:
    void display() {
      cout << "Hello form Class A \n";
    }
};

class B:  virtual public A {
};

class C: virtual public A {
};

class D: public B, public C {
};

int main() {
  D object;
  object.display();
}
